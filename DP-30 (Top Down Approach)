class Solution {
private:
    int findLCS(string &s1, string &s2, int idx1, int idx2, vector<vector<int> > &dp) {
        
        if(idx1 < 0 or idx2 < 0) return 0;
        
        if(dp[idx1][idx2] != -1) return dp[idx1][idx2];
        
        if(s1[idx1] == s2[idx2]) {
            return dp[idx1][idx2] = 1 + findLCS(s1, s2, idx1-1, idx2-1, dp);
        }
        
        int leaveIdx1 = findLCS(s1, s2, idx1-1, idx2, dp);
        int leaveIdx2 = findLCS(s1, s2, idx1, idx2-1, dp);
        
        return dp[idx1][idx2] = max(leaveIdx1, leaveIdx2);
    }
public:
    int minDistance(string word1, string word2) {
        
        int n1 = word1.size();
        int n2 = word2.size();
        
        vector<vector<int> > dp(n1+1, vector<int>(n2+1, -1));
        
        int lcs = findLCS(word1, word2, n1-1, n2-1, dp);
        
        return (n1 + n2) - (2 * lcs);
    }
};
