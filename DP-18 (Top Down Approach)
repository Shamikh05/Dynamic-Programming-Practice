int mod = (int)(1e9 + 7);

int compute(vector<int> &arr, int idx, int target, vector<vector<int> > &dp) {
	
	if(idx==0) {
		if(target==0 and arr[0]==0) return 2;
		if(target==0 or arr[0]==target) return 1;
		return 0;
	}
	
	int pick = 0;
	
	if(dp[idx][target] != -1) 
		return dp[idx][target];
	
	if(target >= arr[idx]) 
		pick = compute(arr, idx-1, target-arr[idx], dp);
	
	int nonPick = compute(arr, idx-1, target, dp);
	
	return dp[idx][target] = (pick + nonPick) % mod;
}

int countPartitions(int n, int d, vector<int> &arr) {
    // Write your code here.
	
	int totalSum = 0;
	
	for(int num : arr) totalSum += num;
	
	if((totalSum - d) < 0 or (totalSum - d) & 1) return 0;
	
	int target = (totalSum - d) / 2;
	
	vector<vector<int> > dp(n, vector<int>(target+1, -1));
	
	return compute(arr, n-1, target, dp);
}
